name: Prepare release
run-name: Prepare release (${{ github.ref_name }})

on:
  workflow_call:
    inputs:
      prerelease:
        type: boolean
        default: true
        required: false
  workflow_dispatch:
    inputs:
      prerelease:
        type: boolean
        default: true
        required: true
        description: Prerelease

concurrency:
  group: 'prepare-release'
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io

jobs:
  build-image:
    name: Build images
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      tag: ${{ steps.set-up-release.outputs.tag }}

    steps:
      -
        name: Login registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Checkout repository
        uses: actions/checkout@v3
      -
        id: set-up-release
        name: Set up release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          last_tag=$(gh release list --limit 1 --repo ${{ github.repository }} | awk 'NR==1{print $3}')
          next_tag=$(awk -F. -v OFS=. '{$NF=$NF+1;print}' <<< ${last_tag:-1.0})
          echo "Last tag: $last_tag Next tag: $next_tag"
          echo "tag=$next_tag" >> $GITHUB_OUTPUT
      -
        name: Set up emulator
        uses: docker/setup-qemu-action@v2
      -
        name: Set up builder
        uses: docker/setup-buildx-action@v2
      -
        name: Set env (stg)
        run: bin/env copy --main stg
      -
        name: Build image (stg)
        env:
          RELEASE_TAG: ${{ steps.set-up-release.outputs.tag }}
        uses: docker/build-push-action@v3
        with:
          file: etc/build/php/Dockerfile
          context: .
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/php/stg:${{ env.RELEASE_TAG }}
          labels: |
            org.opencontainers.image.version=${{ env.RELEASE_TAG }}
          platforms: |
            linux/amd64
            linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

  create-release:
    name: Create release
    needs: build-image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read

    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v3
      -
        name: Set up assets
        env:
          RELEASE_TAG: ${{ needs.build-image.outputs.tag }}
        run: |
          export APP_RELEASE=${{ env.RELEASE_TAG }}

          bin/env copy --output=assets stg
          envsubst < assets/.env.stg | tee assets/.env.stg > /dev/null

          cp docker-compose.yaml assets/
      -
        name: Create release
        env:
          RELEASE_TAG: ${{ needs.build-image.outputs.tag }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tar -C assets -czf environment.tar.gz .
          gh release create ${{ env.RELEASE_TAG }} environment.tar.gz --generate-notes ${{ inputs.prerelease && '--prerelease' || '--latest' }}
      -
        name: Release summary
        env:
          RELEASE_TAG: ${{ needs.build-image.outputs.tag }}
        run: |
          branch_url="/${{ github.repository }}/tree/${{ github.ref_name }}"
          commit_url="/${{ github.repository }}/commit/${{ github.sha }}"
          release_url="/${{ github.repository }}/releases/tag/${{ env.RELEASE_TAG }}"
          
          echo "Branch: [${{ github.ref_name }}]($branch_url)" >> $GITHUB_STEP_SUMMARY
          echo "Commit: [${GITHUB_SHA::7}]($commit_url)" >> $GITHUB_STEP_SUMMARY
          echo "Release: [${{ env.RELEASE_TAG }}]($release_url)" >> $GITHUB_STEP_SUMMARY
